version: "3.9"

#创建网桥
networks:
    net1:
        name: my_net
        driver: bridge #指定网络模式
        ipam:
            driver: default
            config:
                - subnet: 172.1.1.0/24 #指定ip段

#创建卷
volumes:
    logs_volume:
        name: logs_volume_name #在宿主机的目录名

# 定义日志模板
x-logging: &default-logging
    driver: json-file
    options:
        max-size: "200k"
        max-file: "10"

services:

    # nginx:
    #     image: nginx:${nginx:-latest}
    #     container_name: nginx
    #     hostname: docker-nginx
    #     #   - redis
    #     restart: always
    #     working_dir: /var/www/html/ #进入容器的默认目录
    #     environment:
    #       TZ: ${TZ:-Asia/Shanghai}
    #     ports: #docker是有独立的firewall规则的,即时宿主机对外关闭某个端口,实际上docker的相同端口并不会被作用,除非docker本身规则禁止对外,如 127.0.0.1:80:80
    #         - 80:80
    #         - 443:443
    #         - 192.168.111.111:6443:6443
    #     volumes:
    #         - ${PWD}/../thinkPHP5.1-admin/:/var/www/html/thinkPHP5.1-admin/:rw #运行目录
    #         - ${PWD}/../test/:/var/www/html/test/:rw #运行目录
    #         - ${PWD}/conf/nginx/nginx.conf:/etc/nginx/nginx.conf:ro #nginx根配置
    #         - ${PWD}/conf/nginx/conf.d/:/etc/nginx/conf.d/:ro #nginx配置
    #         - ${PWD}/conf/nginx/404.html:/usr/share/nginx/html/404.html:ro
    #         - ${PWD}/../docker/:/root/docker/:ro
    #         - ${PWD}/data/logs/nginx/:/var/www/logs/:rw #日志
    #         # - logs_volume:/var/www/logs/:rw
    #     logging: *default-logging
    #     networks:
    #         net1:
    #             ipv4_address: 172.1.1.99
    #             aliases:
    #               - nginx
    #               - docker-nginx
    #               - twbhub.com
    #               - twbhub.cf

    # php:
    #     # build:
    #     #     context: ${PWD}/conf/php-phalcon-swoole-redis
    #     #     dockerfile: Dockerfile
    #     image: ghcr.io/twbworld/php-phalcon-swoole-redis:${php:-latest}
    #     container_name: php
    #     hostname: docker-php
    #     # depends_on:
    #     #     - mysql
    #     #     - mysql56
    #     command: /bin/bash -c "docker-php-entrypoint php-fpm && service cron start && chmod +x /etc/cron.monthly/*" #启动cron
    #     restart: always
    #     working_dir: /var/www/html/ #进入容器的默认目录
    #     environment:
    #         TZ: ${TZ:-Asia/Shanghai}
    #     volumes:
    #         - ${PWD}/../thinkPHP5.1-admin/:/var/www/html/thinkPHP5.1-admin/:rw #运行目录
    #         - ${PWD}/conf/php/php.ini:/usr/local/etc/php/php.ini:ro #php配置
    #         - ${PWD}/conf/php/www.conf:/usr/local/etc/php-fpm.d/www.conf:ro #php配置
    #         - /root/.ssh/id_rsa:/var/www/.ssh/id_rsa:ro #ssh私钥,用于github验证
    #         - /root/.ssh/known_hosts:/var/www/.ssh/known_hosts:ro #记录github服务器的白名单
    #         - ${PWD}/data/logs/php/:/var/www/logs/:rw #日志
    #     logging: *default-logging
    #     networks:
    #         net1:
    #             ipv4_address: 172.1.1.98
    #             aliases:
    #               - php
    #               - docker-php
    #               - php7

    # php56:
    #     image: ghcr.io/twbworld/php-phalcon-swoole-redis:${php56:-php-5.6}
    #     container_name: php56
    #     hostname: docker-php
    #     depends_on:
    #         - php
    #     command: /bin/bash -c "docker-php-entrypoint php-fpm && service cron start && chmod +x /etc/cron.monthly/*" #启动cron
    #     restart: always
    #     working_dir: /var/www/html/ #进入容器的默认目录
    #     volumes:
    #         - ${PWD}/../../erp/:/var/www/html/erp/:rw #运行目录
    #         - ${PWD}/conf/php/php.ini:/usr/local/etc/php/php.ini:ro #php配置
    #         - ${PWD}/conf/php/www.conf:/usr/local/etc/php-fpm.d/www.conf:ro #php配置
    #         - /root/.ssh/id_rsa:/var/www/.ssh/id_rsa:ro #ssh私钥,用于github验证
    #         - /root/.ssh/known_hosts:/var/www/.ssh/known_hosts:ro #记录github服务器的白名单
    #         - ${PWD}/data/logs/php5/:/var/www/logs/:rw #日志
    #     environment:
    #         TZ: ${TZ:-Asia/Shanghai}
    #     logging: *default-logging
    #     networks:
    #         net1:
    #             ipv4_address: 172.1.1.96
    #             aliases:
    #               - php5
    #               - php56

    # mysql:
    #     image: mysql:${mysql:-latest}
    #     container_name: mysql
    #     hostname: docker-mysql
    #     restart: always
    #     user: root
    #     environment: #设置环境变量
    #         TZ: ${TZ:-Asia/Shanghai}
    #         MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root}
    #         MYSQL_USER:
    #         MYSQL_PASSWORD:
    #         # MYSQL_DATABASE:
    #     ports:
    #         - 127.0.0.1:3306:3306
    #         - 192.168.111.111:3306:3306
    #     volumes:
    #         - ${PWD}/../thinkPHP5.1-admin/docs/tp.sql:/docker-entrypoint-initdb.d/tp.sql:ro #把sql放在docker-entrypoint-initdb.d下,mysql会自动执行
    #         - ${PWD}/../phalcon_shop/docs/panda36_all.sql:/docker-entrypoint-initdb.d/panda36_all.sql:ro
    #         - /usr/local/mysql8-docker/data/:/var/lib/mysql/:rw #库数据,一旦使用,设置的环境变量和自动执行sql功能则失效
    #         - ${PWD}/conf/mysql/my.cnf:/etc/mysql/conf.d/my.cnf:ro #配置文件
    #         - ${PWD}/data/logs/mysql/:/var/www/logs/:rw #日志
    #     logging: *default-logging
    #     networks:
    #         net1:
    #             ipv4_address: 172.1.1.97
    #             aliases:
    #               - mysql
    #               - docker-mysql
    #               - mysql8
    # trojan:
    #     image: jrohy/trojan:latest
    #     container_name: trojan
    #     restart: always
    #     privileged: true
    #     tty: true
    #     environment:
    #         TZ: ${TZ:-Asia/Shanghai}
    #     logging: *default-logging
    #     volumes:
    #         - ${PWD}/data/cert/cc.cc/:/a/:ro
    #         - ${PWD}/../../trojan-2.15.2/asset/trojan-install.sh:/trojan-install.sh:rw
    #     networks:
    #         net1:
    #             ipv4_address: 172.1.1.85

    trojan-go:
        # build:
        #     context: ${PWD}/../docker-v2ray-trojan
        #     dockerfile: Dockerfile
        # image: ubuntu:20.04
        image: ghcr.io/twbworld/v2ray-trojan:1.2.16
        container_name: trojan-go
        restart: always
        privileged: true
        tty: true
        command: /bin/bash -c 'apt-get update && apt-get install -y --no-install-recommends --no-install-suggests tzdata && echo "Asia/Shanghai" > /etc/timezone && /usr/local/bin/trojan web'
        environment:
            TZ: ${TZ:-Asia/Shanghai}
        logging: *default-logging
        volumes:
            - ${PWD}/data/cert/cc.cc/:/a/:ro
            - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
        networks:
            net1:
                ipv4_address: 172.1.1.84

    # proxy:
    #     image: ghcr.io/twbworld/proxy:latest
    #     depends_on:
    #       - mysql
    #     restart: always
    #     working_dir: /app/ #进入容器的默认目录
    #     environment:
    #         TZ: ${TZ:-Asia/Shanghai}
    #     volumes:
    #         - ${PWD}/../proxy/config/.env:/app/config/.env:ro #运行目录
    #     logging: *default-logging
    #     networks:
    #         net1:
    #             ipv4_address: 172.1.1.86

    # mysql56:
    #     image: mysql:${mysql56:-5.6}
    #     container_name: mysql56
    #     hostname: docker-mysql
    #     depends_on:
    #         - mysql
    #     command: /bin/bash -c "chown -R www-data:www-data /var/lib/mysql /var/run/mysqld &&  mysqld"
    #     restart: always
    #     volumes:
    #         - ${PWD}/../../erp/yanming.sql:/docker-entrypoint-initdb.d/yanming.sql:ro #把sql放在docker-entrypoint-initdb.d下,mysql会自动执行
    #         - /usr/local/mysql5-docker/data/:/var/lib/mysql/:rw #库数据,一旦使用,设置的环境变量和自动执行sql功能则失效
    #         - ${PWD}/conf/mysql/my.cnf:/etc/mysql/conf.d/my.cnf:ro #配置文件
    #         - ${PWD}/data/logs/mysql5/:/var/www/logs/:rw #日志
    #     environment: #设置环境变量
    #         TZ: ${TZ:-Asia/Shanghai}
    #         MYSQL_ROOT_PASSWORD: ${MYSQL5_ROOT_PASSWORD:-root}
    #         MYSQL_USER:
    #         MYSQL_PASSWORD:
    #         MYSQL_DATABASE:
    #     logging: *default-logging
    #     networks:
    #         net1:
    #             ipv4_address: 172.1.1.95
    #             aliases:
    #               - mysql5
    #               - mysql56


    # mysql57:
    #     image: mysql:${mysql57:-5.7}
    #     container_name: mysql57
    #     hostname: docker-mysql
    #     restart: always
    #     environment: #设置环境变量
    #         TZ: ${TZ:-Asia/Shanghai}
    #         MYSQL_ROOT_PASSWORD: ${MYSQL5_ROOT_PASSWORD:-root}
    #         MYSQL_USER:
    #         MYSQL_PASSWORD:
    #         MYSQL_DATABASE:
    #     ports:
    #         - 3306:3306
    #     logging: *default-logging
    #     networks:
    #         net1:
    #             ipv4_address: 172.1.1.95
    #             aliases:
    #               - mysql5
    #               - mysql57

    # redis:
    #     image: redis:${redis:-latest}
    #     container_name: redis
    #     hostname: docker-redis
    #     restart: always
    #     environment:
    #         TZ: ${TZ:-Asia/Shanghai}
    #     logging: *default-logging
    #     networks:
    #         net1:
    #             ipv4_address: 172.1.1.94
    #             aliases:
    #               - redis
    #               - docker-redis
    #               - redis6

    # hugo:
    #     image: ghcr.io/twbworld/hugo-go-git:${hugo:-latest}
    #     container_name: hugo
    #     hostname: docker-hugo
    #     working_dir: /src/
    #     command: server -D --i18n-warnings
    #     restart: always
    #     environment:
    #         TZ: ${TZ:-Asia/Shanghai}
    #         HUGO_DESTINATION: ${HUGO_DESTINATION:-public}
    #         HUGO_BIND: ${HUGO_BIND:-0.0.0.0}
    #         HUGO_ENV: ${HUGO_ENV:-DEV} # DEV || production
    #     ports:
    #         - 1313:1313
    #     volumes:
    #         - ${PWD}/../twbworld.GitHub.io/wowchemy/:/src/:rw #hugo项目的根目录
    #         - /tmp/hugo_cache/:/tmp/hugo_cache/:rw #hugo模板缓存
    #     logging: *default-logging
    #     networks:
    #         net1:
    #             ipv4_address: 172.1.1.93
    #             aliases:
    #               - hugo
    #               - docker-hugo

    # es:
    #     image: elasticsearch:${es:-latest}
    #     container_name: es
    #     hostname: docker-es
    #     restart: always
    #     environment:
    #         TZ: ${TZ:-Asia/Shanghai}
    #         ES_JAVA_OPTS:
    #         discovery.type:
    #     ports:
    #         - 9200:9200
    #         - 9300:9300
    #     volumes:
    #         - /var/www/es/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
    #         - /var/www/es/data/:/usr/share/elasticsearch/data/:rw
    #         - /var/www/es/plugins/:/usr/share/elasticsearch/plugins/:rw
    #     logging: *default-logging
    #     networks:
    #         net1:
    #             ipv4_address: 172.1.1.92
    #             aliases:
    #               - es
    #               - docker-es
    #               - es7

    # kibana:
    #     image: kibana:${kibana:-latest}
    #     container_name: kibana
    #     hostname: docker-kibana
    #     depends_on:
    #         - es
    #     restart: always
    #     ports:
    #         - 5601:5601
    #     volumes:
    #         - /var/www/es/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    #     environment:
    #         TZ: ${TZ:-Asia/Shanghai}
    #         ELASTICSEARCH_HOSTS:
    #     logging: *default-logging
    #     networks:
    #         net1:
    #             ipv4_address: 172.1.1.91
    #             aliases:
    #               - kibana
    #               - docker-kibana

    # logstash:
    #     image: docker.elastic.co/logstash/logstash:${logstash:-latest}
    #     container_name: logstash
    #     hostname: docker-logstash
    #     depends_on:
    #         - kibana
    #     restart: always
    #     environment:
    #         TZ: ${TZ:-Asia/Shanghai}
    #     ports:
    #         - 5044:5044
    #     volumes:
    #         - /var/www/es/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    #         - /var/www/es/logstash/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
    #         - /var/www/es/logstash/mysql-connector-java-8.0.23/mysql-connector-java-8.0.23.jar:/usr/share/logstash/pipeline/mysql-connector-java-8.0.23.jar:rw
    #     logging: *default-logging
    #     networks:
    #         net1:
    #             ipv4_address: 172.1.1.90
    #             aliases:
    #               - logstash
    #               - docker-logstash



    # qinglong:
    #     image: whyour/qinglong
    #     container_name: qinglong
    #     hostname: docker-qinglong
    #     entrypoint:
    #           - /bin/bash
    #           - -c
    #           - |
    #            sed -i "s/crond/#crond/" docker/docker-entrypoint.sh
    #            ./docker/docker-entrypoint.sh
    #            echo "{\"username\":\"${QL_USERNAME:-root}\",\"password\":\"${QL_PASSWORD:-root}\",\"token\":\"${QL_TOKEN}\"}" > /ql/config/auth.json
    #            sleep 3s
    #            ql repo https://github.com/zero205/JD_tencent_scf.git "jd_|jx_|getJDCookie" "backUp|icon" "^jd[^_]|USER|sendNotify|sign_graphics_validate|JDJR|JDSign" "main"
    #            crond -f >/dev/null
    #     restart: always
    #     environment:
    #       TZ: ${TZ:-Asia/Shanghai}
    #       JD_COOKIE:
    #       JD_JOIN_ZLC: ${JD_JOIN_ZLC:-false}
    #       JD_USER_AGENT:
    #       TG_BOT_TOKEN:
    #       TG_USER_ID:
    #     volumes:
    #         - /root/.ssh/id_rsa:/var/www/.ssh/id_rsa:ro #ssh私钥,用于github验证
    #         - /root/.ssh/known_hosts:/var/www/.ssh/known_hosts:ro #记录github服务器的白名单
    #     logging: *default-logging
    #     networks:
    #         net1:
    #             ipv4_address: 172.1.1.89
    #             aliases:
    #               - qinglong
    #               - docker-qinglong

    # go:
    #     image: golang:${golang:-latest}
    #     container_name: go
    #     hostname: docker-go
    #     command: /bin/bash -c "go build -o server main.go && ./server"
    #     restart: always
    #     working_dir: /var/www/html/proxy/ #进入容器的默认目录
    #     environment:
    #       TZ: ${TZ:-Asia/Shanghai}
    #       GO111MODULE: "on"
    #       GOPATH: "/go"
    #     volumes:
    #         - ${GOPATH:-/root/go}/pkg/:/go/pkg/:rw
    #         - ${PWD}/../proxy/:/var/www/html/proxy/:rw #运行目录
    #         - ${PWD}/data/logs/go/:/var/www/html/proxy/log/:rw #日志
    #     logging: *default-logging
    #     networks:
    #         net1:
    #             ipv4_address: 172.1.1.88
    #             aliases:
    #               - go
    #               - golang
    #               - docker-go

    # rancher:
    #     image: rancher/server:${rancher:-stable}
    #     container_name: rancher
    #     hostname: docker-rancher
    #     depends_on:
    #       - mysql57
    #     command: /bin/bash -c "/usr/bin/s6-svscan /service --db-host 172.1.1.1 --db-user root --db-pass root --db-name cattle"
    #     ports:
    #       - 8081:8080
    #     restart: unless-stopped
    #     environment:
    #       TZ: ${TZ:-Asia/Shanghai}
    #     logging: *default-logging
    #     networks:
    #         net1:
    #             ipv4_address: 172.1.1.87
    #             aliases:
    #               - rancher
    #               - docker-rancher
