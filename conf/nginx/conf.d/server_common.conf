if ($scheme != https) {
    # 如果listen的端口使用ssl,这失效,nginx会转为497状态
    return 301 https://$http_host$request_uri;
    # rewrite https://$http_host$request_uri permanent;
}
if ($server_port != 443) {
    return 301 https://$host$request_uri;
}
if ($ssl_protocol = "") {
    # return 301 https://$host$request_uri;
}

#错误页配置
error_page 497 https://$http_host$request_uri; #http转https
error_page 404 =200 /404.html;
error_page 500 502 503 504 =200 /50x.html;

ssl_certificate /root/docker/data/cert/twbhub.com_top/cert.pem;
ssl_certificate_key /root/docker/data/cert/twbhub.com_top/key.pem;

ssl_session_cache shared:SSL:10m; #配置共享会话缓存大小
ssl_session_timeout 10m; #配置会话超时时间
ssl_session_tickets off;
ssl_prefer_server_ciphers on; #优先采取服务器算法
ssl_dhparam /root/docker/data/cert/twbhub.com_top/dhparam.pem; #使用D-H安全协议(迪菲-赫尔曼密钥交换)代替https 默认的SHA-1算法.(生成命令:openssl dhparam -out dhparam.pem 2048)
ssl_protocols TLSv1.2 TLSv1.3; #协议版本
ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5; #定义算法

add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always; #启用HSTS;要求浏览器总是通过 https
add_header X-Frame-Options SAMEORIGIN; #禁止外源iframes,减少点击劫持
add_header X-Content-Type-Options nosniff; #禁止服务器自动解析资源类型
add_header X-Xss-Protection "1; mode=block"; #防XSS攻击
add_header wall  "Hi! Welcome!";

real_ip_header proxy_protocol;
set_real_ip_from 127.0.0.1; #从Proxy protocol获取真实IP(对应"listen 127.0.0.1:443"的配置)


#禁止访问的文件或目录
location ~ ^/(\.user.ini|\.htaccess|\.git|\.svn|\.project|LICENSE|README.md)
{
    return 404;
}

# 错误页访问路径,使用nginx自带的html
location = /50x.html {
    root   /usr/local/nginx/html/;
    internal;
}
